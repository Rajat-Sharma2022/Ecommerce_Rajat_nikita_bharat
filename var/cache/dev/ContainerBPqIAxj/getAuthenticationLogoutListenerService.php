<?php

namespace ContainerBPqIAxj;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAuthenticationLogoutListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\EventListener\AuthenticationLogoutListener' shared autowired service.
     *
     * @return \App\EventListener\AuthenticationLogoutListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/pimcore/pimcore/bundles/AdminBundle/Security/Event/LogoutListener.php';
        include_once \dirname(__DIR__, 4).'/src/EventListener/AuthenticationLogoutListener.php';

        $a = ($container->services['router'] ?? $container->getRouterService());

        if (isset($container->privates['App\\EventListener\\AuthenticationLogoutListener'])) {
            return $container->privates['App\\EventListener\\AuthenticationLogoutListener'];
        }
        $b = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->privates['App\\EventListener\\AuthenticationLogoutListener'])) {
            return $container->privates['App\\EventListener\\AuthenticationLogoutListener'];
        }

        $container->privates['App\\EventListener\\AuthenticationLogoutListener'] = $instance = new \App\EventListener\AuthenticationLogoutListener(($container->services['pimcore_ecommerce.environment'] ?? $container->getPimcoreEcommerce_EnvironmentService()), ($container->privates['Pimcore\\Bundle\\EcommerceFrameworkBundle\\EventListener\\SessionBagListener'] ?? ($container->privates['Pimcore\\Bundle\\EcommerceFrameworkBundle\\EventListener\\SessionBagListener'] = new \Pimcore\Bundle\EcommerceFrameworkBundle\EventListener\SessionBagListener())), ($container->services['.container.private.session'] ?? $container->get_Container_Private_SessionService()), ($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()), $a, $b);

        $instance->setLogger(($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()));

        return $instance;
    }
}
